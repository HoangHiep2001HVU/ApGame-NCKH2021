{"ast":null,"code":"import _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React, { Component } from 'react';\nimport TrackPlayer from \"./index.js\";\n\nvar ProgressComponent = function (_Component) {\n  _inherits(ProgressComponent, _Component);\n\n  var _super = _createSuper(ProgressComponent);\n\n  function ProgressComponent(props) {\n    var _this;\n\n    _classCallCheck(this, ProgressComponent);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      position: 0,\n      bufferedPosition: 0,\n      duration: 0\n    };\n    return _this;\n  }\n\n  _createClass(ProgressComponent, [{\n    key: \"componentDidMount\",\n    value: function componentDidMount() {\n      this._progressUpdates = true;\n\n      this._updateProgress();\n\n      this._timer = setInterval(this._updateProgress.bind(this), 1000);\n    }\n  }, {\n    key: \"componentWillUnmount\",\n    value: function componentWillUnmount() {\n      this._progressUpdates = false;\n      clearInterval(this._timer);\n    }\n  }, {\n    key: \"_updateProgress\",\n    value: function _updateProgress() {\n      var data;\n      return _regeneratorRuntime.async(function _updateProgress$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.prev = 0;\n              _context.next = 3;\n              return _regeneratorRuntime.awrap(TrackPlayer.getPosition());\n\n            case 3:\n              _context.t0 = _context.sent;\n              _context.next = 6;\n              return _regeneratorRuntime.awrap(TrackPlayer.getBufferedPosition());\n\n            case 6:\n              _context.t1 = _context.sent;\n              _context.next = 9;\n              return _regeneratorRuntime.awrap(TrackPlayer.getDuration());\n\n            case 9:\n              _context.t2 = _context.sent;\n              data = {\n                position: _context.t0,\n                bufferedPosition: _context.t1,\n                duration: _context.t2\n              };\n\n              if (this._progressUpdates) {\n                this.setState(data);\n              }\n\n              _context.next = 16;\n              break;\n\n            case 14:\n              _context.prev = 14;\n              _context.t3 = _context[\"catch\"](0);\n\n            case 16:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, this, [[0, 14]], Promise);\n    }\n  }, {\n    key: \"getProgress\",\n    value: function getProgress() {\n      if (!this.state.duration || !this.state.position) return 0;\n      return this.state.position / this.state.duration;\n    }\n  }, {\n    key: \"getBufferedProgress\",\n    value: function getBufferedProgress() {\n      if (!this.state.duration || !this.state.bufferedPosition) return 0;\n      return this.state.bufferedPosition / this.state.duration;\n    }\n  }]);\n\n  return ProgressComponent;\n}(Component);\n\nmodule.exports = ProgressComponent;","map":{"version":3,"sources":["E:/hiep/NCKH2021/AppGame/node_modules/react-native-track-player/lib/ProgressComponent.js"],"names":["React","Component","TrackPlayer","ProgressComponent","props","state","position","bufferedPosition","duration","_progressUpdates","_updateProgress","_timer","setInterval","bind","clearInterval","getPosition","getBufferedPosition","getDuration","data","setState","module","exports"],"mappings":";;;;;;;;;;;AAAA,OAAOA,KAAP,IAAgBC,SAAhB,QAAiC,OAAjC;AACA,OAAOC,WAAP;;IAEMC,iB;;;;;AAEF,6BAAYC,KAAZ,EAAmB;AAAA;;AAAA;;AACf,8BAAMA,KAAN;AACA,UAAKC,KAAL,GAAa;AACTC,MAAAA,QAAQ,EAAE,CADD;AAETC,MAAAA,gBAAgB,EAAE,CAFT;AAGTC,MAAAA,QAAQ,EAAE;AAHD,KAAb;AAFe;AAOlB;;;;WAED,6BAAoB;AAChB,WAAKC,gBAAL,GAAwB,IAAxB;;AACA,WAAKC,eAAL;;AACA,WAAKC,MAAL,GAAcC,WAAW,CAAC,KAAKF,eAAL,CAAqBG,IAArB,CAA0B,IAA1B,CAAD,EAAkC,IAAlC,CAAzB;AACH;;;WAED,gCAAuB;AACnB,WAAKJ,gBAAL,GAAwB,KAAxB;AACAK,MAAAA,aAAa,CAAC,KAAKH,MAAN,CAAb;AACH;;;WAMD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CAK4BT,WAAW,CAACa,WAAZ,EAL5B;;AAAA;AAAA;AAAA;AAAA,+CAMoCb,WAAW,CAACc,mBAAZ,EANpC;;AAAA;AAAA;AAAA;AAAA,+CAO4Bd,WAAW,CAACe,WAAZ,EAP5B;;AAAA;AAAA;AAIcC,cAAAA,IAJd;AAKYZ,gBAAAA,QALZ;AAMYC,gBAAAA,gBANZ;AAOYC,gBAAAA,QAPZ;AAAA;;AAUQ,kBAAG,KAAKC,gBAAR,EAA0B;AACtB,qBAAKU,QAAL,CAAcD,IAAd;AACH;;AAZT;AAAA;;AAAA;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;;;WAsBA,uBAAc;AACV,UAAG,CAAC,KAAKb,KAAL,CAAWG,QAAZ,IAAwB,CAAC,KAAKH,KAAL,CAAWC,QAAvC,EAAiD,OAAO,CAAP;AAEjD,aAAO,KAAKD,KAAL,CAAWC,QAAX,GAAsB,KAAKD,KAAL,CAAWG,QAAxC;AACH;;;WAMD,+BAAsB;AAClB,UAAG,CAAC,KAAKH,KAAL,CAAWG,QAAZ,IAAwB,CAAC,KAAKH,KAAL,CAAWE,gBAAvC,EAAyD,OAAO,CAAP;AAEzD,aAAO,KAAKF,KAAL,CAAWE,gBAAX,GAA8B,KAAKF,KAAL,CAAWG,QAAhD;AACH;;;;EA9D2BP,S;;AAkEhCmB,MAAM,CAACC,OAAP,GAAiBlB,iBAAjB","sourcesContent":["import React, { Component } from 'react';\nimport TrackPlayer from './index.js';\n\nclass ProgressComponent extends Component {\n\n    constructor(props) {\n        super(props);\n        this.state = {\n            position: 0,\n            bufferedPosition: 0,\n            duration: 0\n        };\n    }\n\n    componentDidMount() {\n        this._progressUpdates = true;\n        this._updateProgress();\n        this._timer = setInterval(this._updateProgress.bind(this), 1000);\n    }\n\n    componentWillUnmount() {\n        this._progressUpdates = false;\n        clearInterval(this._timer);\n    }\n\n    /**\n     * Updates the progress state\n     * @private\n     */\n    async _updateProgress() {\n        // TODO check for performance here\n        // We can create a new native function to reduces these 3 native calls to only one, if needed\n        try {\n            const data = {\n                position: await TrackPlayer.getPosition(),\n                bufferedPosition: await TrackPlayer.getBufferedPosition(),\n                duration: await TrackPlayer.getDuration()\n            };\n\n            if(this._progressUpdates) {\n                this.setState(data);\n            }\n        } catch(e) {\n            // The player is probably not initialized yet, we'll just ignore it\n        }\n    }\n\n    /**\n     * Gets the played progress expressed between 0 and 1\n     * @return {number}\n     */\n    getProgress() {\n        if(!this.state.duration || !this.state.position) return 0;\n\n        return this.state.position / this.state.duration;\n    }\n\n    /**\n     * Gets the buffered progress expressed between 0 and 1\n     * @return {number}\n     */\n    getBufferedProgress() {\n        if(!this.state.duration || !this.state.bufferedPosition) return 0;\n\n        return this.state.bufferedPosition / this.state.duration;\n    }\n\n}\n\nmodule.exports = ProgressComponent;\n"]},"metadata":{},"sourceType":"module"}